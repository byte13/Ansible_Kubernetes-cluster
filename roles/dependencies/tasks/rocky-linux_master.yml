---
# tasks file for k8s dependencies

- name: Show facts available on the system
  ansible.builtin.debug:
    var: ansible_facts
  when: global_display_facts == "yes"

# Possibly remove proxy environment variables from /etc/environment 
# To check what programs leverage /etc/environment, run grep -l pam_env /etc/pam.d/* on target host
- name: No proxy required - Remove possible proxy variables from /etc/environment
  ansible.builtin.blockinfile:
    path: /etc/environment
    marker_begin: "# Next lines added by Ansible_Kubernetes-cluster playbook"
    marker_end: "# Previous lines added by Ansible_Kubernetes-cluster playbook"
    block: "" 
  #when: global_proxy_required != "yes" 

# If required, set proxy global environment variables in /etc/environment 
# To check what programs leverage /etc/environment, run grep -l pam_env /etc/pam.d/* on target host
- name: Proxy required - Set proxy global environment variables in /etc/environment
  ansible.builtin.blockinfile:
    path: /etc/environment
    marker_begin: "# Next lines added by Ansible_Kubernetes-cluster playbook"
    marker_end: "# Previous lines added by Ansible_Kubernetes-cluster playbook"
    block: |
      http_proxy="{{ global_http_proxy }}"
      https_proxy="{{ global_https_proxy }}" 
      no_proxy="{{ global_no_proxy }}"
      HTTP_PROXY="{{ global_http_proxy }}"
      HTTPS_PROXY="{{ global_https_proxy }}" 
      NO_PROXY="{{ global_no_proxy }}"
  when: global_proxy_required == "yes" 

# Possibly delete /etc/profile.d/http_proxy.sh
# For programs started in a shell interpreter (typically bash, sh) 
- name: No proxy required - Remove {{ global_proxy_profile }} 
  ansible.builtin.file:
    path: "{{ global_proxy_profile }}" 
    state: absent
  #when: global_proxy_required != "yes" 

# If required, set proxy global environment variables in /etc/profile.d/http_proxy.sh
# For programs started in a shell interpreter (typically bash, sh) 
- name: Proxy required - Set proxy global environment variables in {{ global_proxy_profile }} 
  ansible.builtin.blockinfile:
    path: "{{ global_proxy_profile }}" 
    create: "true"
    marker_begin: "# Next lines added by Ansible_Kubernetes-cluster playbook"
    marker_end: "# Previous lines added by Ansible_Kubernetes-cluster playbook"
    block: |
      export http_proxy="{{ global_http_proxy }}"
      export https_proxy="{{ global_https_proxy }}"
      export no_proxy="{{ global_no_proxy }}"
      export HTTP_PROXY="{{ global_http_proxy }}"
      export HTTPS_PROXY="{{ global_https_proxy }}"
      export NO_PROXY="{{ global_no_proxy }}"
  when: global_proxy_required == "yes" 

# Remove possible proxy definitions from /etc/dnf/dnf.conf
- name: No proxy required - Remove possible proxy definitions from /etc/dnf/dnf.conf 
  ansible.builtin.blockinfile:
    path: /etc/dnf/dnf.conf 
    backup: yes
    marker_begin: "# Next lines added by Ansible_Kubernetes-cluster playbook"
    marker_end: "# Previous lines added by Ansible_Kubernetes-cluster playbook"
    block: "" 
  #when: global_proxy_required != "yes" 

# If required, set proxy in /etc/dnf/dnf.conf
- name: Proxy required - Set proxy in /etc/dnf/dnf.conf 
  ansible.builtin.blockinfile:
    path: /etc/dnf/dnf.conf 
    backup: yes
    marker_begin: "# Next lines added by Ansible_Kubernetes-cluster playbook"
    marker_end: "# Previous lines added by Ansible_Kubernetes-cluster playbook"
    block: |
      proxy="{{ global_http_proxy }}"
  when: global_proxy_required == "yes" 

# The following repository is required to install Kubernetes using kubeadm
# Must be define early in order to install crictl required by kubeadm and to possibly test CRI 
- name: "Add Kubernetes {{ k8s_version }} Kubernetes yum repository"
  yum_repository:
    name: "{{ global_k8s_reponame1 }}"
    description: "{{ global_k8s_repodesc1 }}"
    baseurl: "{{ global_k8s_repobaseurl1 }}"
    gpgcheck: yes
    gpgkey: "{{ global_k8s_repogpgkey1 }}"

- name: Install possible OS updates using dnf on {{ ansible_facts['os_family'] }}
  dnf:
    name: "*"
    state: latest
    exclude: kubelet
  when: global_upgrade_node == "yes"

- name: Install some required utilities 
  become: yes
  dnf:
    name: "{{ item }}"
    state: latest
  loop:
    - container-selinux
    - curl
    - git
    #- helm
  when: inventory_hostname in groups['k8smasternodes']


- name: "Get script via proxy to install Helm"
  become: no
  get_url:
    url: "{{ dependencies_helm_URL }}"
    dest: "{{ dependencies_helm_script }}"
    force: "yes"
    mode: '0750'
    use_proxy: true
  environment:
    http_proxy: "{{ global_http_proxy }}"
    https_proxy: "{{ global_https_proxy }}"
  register: retval 
  when: global_proxy_required == "yes"

#- name: "Display returned value"
#  debug:
#    var: retval.dest

- name: Add a line to /etc/sudoers to allow {{ remote_user }} to sudo without password
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: "{{ remote_user }} ALL=(ALL)	NOPASSWD: ALL "
    state: present

- name: "Run script to install Helm"
  # Note that the script does sudo commands and that /etc/sudoers should not require a password :-(
  become: no
  shell: |
      "{{ dependencies_helm_script }}"
      # "{{ retval.dest }}"
  when: retval.dest is defined and inventory_hostname in groups['k8smasternodes']

- name: "Get script without proxy to install Helm"
  become: no
  get_url:
    url: "{{ dependencies_helm_URL }}"
    dest: "{{ dependencies_helm_script }}"
    force: "yes"
    mode: '0700'
  register: retval 
  when: global_proxy_required != "yes"

- name: "Run script to install Helm"
  # Note that the script does sudo commands and that /etc/sudoers should not require a password :-(
  become: no
  shell: |
    "{{ dependencies_helm_script }}"
    #"{{ retval.dest }}" 
  when: retval.dest is defined and inventory_hostname in groups['k8smasternodes']

- name: "Removing Helm installation script"
  file:
    path: "{{ dependencies_helm_script }}"
    state: absent

- name: Remove the line to /etc/sudoers to allow {{ remote_user }} to sudo without password
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    line: "{{ remote_user }} ALL=(ALL)	NOPASSWD: ALL "
    state: absent

